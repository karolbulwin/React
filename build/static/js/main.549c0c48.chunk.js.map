{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Hello","props","react_default","a","createElement","name","Button","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","bind","assertThisInitialized","increment","incrementValue","onClick","React","Component","Display","count","Time","_this2","time","Date","toLocaleTimeString","_this3","setInterval","setState","Counter","_this4","state","className","App_Button","App_Display","App_Time","Card","profile","src","avatar_url","alt","company","href","html_url","target","rel","CardList","profiles","map","App_Card","assign","key","id","Form","userName","handleSubmit","_callee","event","res","regenerator_default","wrap","_context","prev","next","preventDefault","axios","get","concat","_this5","sent","onSubmit","data","stop","handleInput","value","type","placeholder","onChange","required","AppCard","_this6","addNewProfile","profileData","console","log","prevState","toConsumableArray","title","App_Form","App_CardList","App","logo","App_Counter","App_AppCard","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.549c0c48.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport axios from 'axios';\nimport logo from './logo.svg';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Counter />\n        <hr />\n        <AppCard />\n      </header>\n    </div>\n  );\n}\n\nfunction Hello(props) {\n  return <p>Say Hello to {props.name}!</p>\n}\n\nclass Button extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.props.increment(this.props.incrementValue)\n  }\n  render() {\n    return (\n      <button onClick={this.handleClick}>{this.props.incrementValue}</button>\n    )\n  }\n}\nclass Display extends React.Component {\n  render() {\n    return (\n      <p>Double me: {this.props.count}</p>\n    )\n  }\n}\n\nclass Time extends React.Component {\n  constructor(props) {\n    super(props);\n    this.time = new Date().toLocaleTimeString();\n  }\n  componentDidMount() {\n    setInterval(() => {\n      this.setState({\n        time: this.time = new Date().toLocaleTimeString()\n      });\n    }, 1000);\n  }\n  render() {\n    return (\n      <p>{this.time}</p>\n    )\n  }\n}\n\nclass Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.name = 'React button counter';\n    this.state = {\n      count: 5\n    };\n    this.increment = this.increment.bind(this);\n  }\n  increment(incrementValue) {\n    this.setState({\n      count: this.state.count + incrementValue\n    })\n  }\n  render() {\n    return (\n      <div className=\"Counter\">\n        <Hello name={this.name} />\n        <Button increment={this.increment} incrementValue={1} />\n        <Button increment={this.increment} incrementValue={5} />\n        <Button increment={this.increment} incrementValue={10} />\n        <Button increment={this.increment} incrementValue={100} />\n        <Display count={this.state.count} />\n        <Time />\n      </div>\n    )\n  }\n}\n\nclass Card extends React.Component {\n  render() {\n    const profile = this.props;\n    return (\n      <div className='github-profile'>\n        <img src={profile.avatar_url} alt=''></img>\n        <div className='info'>\n          <div className='name'>{profile.name}</div>\n          <div className='company'>{profile.company}</div>\n          <div className='url'><a href={profile.html_url} target='_blank' rel=\"noopener noreferrer\">See my GitHub profile</a></div>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst CardList = (props) => {\n  return (\n    <div>\n      {props.profiles.map(profile => <Card key={profile.id} {...profile} />)}\n    </div>\n  )\n}\n\nclass Form extends React.Component {\n  state = {\n    userName: ''\n  };\n  handleSubmit = async (event) => {\n    event.preventDefault();\n    const res = await axios.get(`https://api.github.com/users/${this.state.userName}`);\n    this.props.onSubmit(res.data);\n    this.setState({ userName: '' });\n  };\n  handleInput = event => this.setState({ userName: event.target.value });\n  \n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n        type='text'\n        placeholder='GitHub username'\n        value={this.state.userName}\n        onChange={this.handleInput}\n        required>\n        </input>\n        <button>Add card</button>\n      </form>\n    )\n  }\n}\n\nclass AppCard extends React.Component {\n  constructor(props) {\n    super(props);\n    this.title = 'The GitHub Cards App';\n  }\n  state = {\n    profiles: []\n  }\n  addNewProfile = (profileData) => {\n    console.log(profileData);\n    this.setState(prevState => ({\n      profiles: [...prevState.profiles, profileData]\n    }));\n  };\n  render() {\n    return (\n      <div className='appCard'>\n        <div className='header'>{this.title}</div>\n        <Form onSubmit={this.addNewProfile}/>\n        <CardList profiles={this.state.profiles} />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}